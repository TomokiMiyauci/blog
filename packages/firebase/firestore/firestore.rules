rules_version = '2'

service cloud.firestore {
  function isValidUsers(user) {
    return user.size () == 2 &&
    'createdAt' in user && user.createdAt is timestamp &&
    'updatedAt' in user && user.updatedAt is timestamp;
  }

  function isValidArticles(article) {
    return
    ('view' in article && article.view is int) ||
    ('like' in article && article.like is int) ||
    ('comment' in article && article.comment is int);
  }

  function isValidUserRef(user) {
    return user.size() == 1 &&
    'userRef' in user && user.userRef is path;
  }

  function isValidLikedUsers(likedUser) {
    return likedUser.size() == 1 &&
    'userRef' in likedUser && likedUser.userRef is path;
  }

  function isValideComments(comment) {
    return comment.size() == 3 &&
    'text' in comment && comment.text is string &&
    'userRef' in comment && comment.userRef is path &&
    'createdAt' in comment && comment.createdAt is timestamp;
  }

    function isValideReportedUsers(reportedUser) {
    return reportedUser.size() == 2 &&
    'userRef' in reportedUser && reportedUser.userRef is path &&
    'createdAt' in reportedUser && reportedUser.createdAt is timestamp;
  }



  function isAuthenticated(request) {
    return request.auth.uid != null;
  }

  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{uid} {
      allow create: if isValidUsers(request.resource.data);

      match /likedArticles/{likedArticle} {
        allow get, list;
      }
    }

    match /articles/{slug} {
      allow read;

      allow create, update: if isValidArticles(request.resource.data);

      match /likedUsers/{likedUser} {
        allow read, delete;

        allow create, update: if isValidLikedUsers(request.resource.data);
      }

      match /viewedUsers/{viewedUser} {
        allow create: if isAuthenticated(request) && isValidUserRef(request.resource.data);
      }

      match /comments/{comment} {
        allow list, get;

        allow create: if isAuthenticated(request) && isValideComments(request.resource.data);

        allow delete: if isAuthenticated(request);

         match /reportedUsers/{reportedUser} {
           allow create, update: if isAuthenticated(request) && isValideReportedUsers(request.resource.data);
         }
      }
    }
  }
}
